{"version":3,"sources":["../node_modules/fm.liveswitch sync /^/.*$","InputForm.js","App.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","props","onJoin","React","useState","channelId","setChannelId","userId","setUserId","deviceId","setDeviceId","type","value","onChange","content","onClick","require","Client","Token","ChannelClaim","LocalMedia","AudioStream","VideoStream","RemoteMedia","DomLayoutManager","fmServerUrl","App","remoteMedias","state","isAudio","isVideo","isScreen","peers","toggleAudio","setState","prevState","toggleVideo","toggleScreen","getActionsStatusAsString","JSON","stringify","sendActionStatusToAll","channel","sendMessage","sendAudioVideoUpConnections","audioStream","audioLM","upAudioConnection","createSfuUpstreamConnection","setTag","open","videoStream","videoLM","upVideoConnection","sendUpScreenConnection","screenLM","upScreenConnection","closeUpScreenConnection","close","listenToChannel","addOnRemoteUpstreamConnectionOpen","remoteConnectionInfo","getTag","stream","remoteMedia","getUserId","push","layoutManager","addRemoteView","getId","getView","createSfuDownstreamConnection","addOnRemoteUpstreamConnectionClose","remoteMediaItem","find","rm","removeRemoteView","filter","addOnUserMessage","cl","message","messageParsed","parse","messageBody","sendUserMessage","addOnMessage","obj","addOnRemoteClientJoin","handleJoin","info","client","token","generateClientRegisterToken","register","then","channels","this","start","layoutRef","prevProps","getAudioTrack","setMuted","stop","InputForm","className","ref","node","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.61d1efd0.chunk.js","sourcesContent":["var map = {\n\t\"./fm.liveswitch\": 247,\n\t\"./fm.liveswitch.d.ts\": 1037,\n\t\"./fm.liveswitch.js\": 247,\n\t\"./package\": 391,\n\t\"./package.json\": 391\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 1036;","import React from 'react';\r\nimport { Input, Button } from '@scuf/common';\r\n\r\nexport default props => {\r\n    const { onJoin } = props;\r\n    const [ channelId, setChannelId ] = React.useState('');\r\n    const [ userId, setUserId ] = React.useState('');\r\n    const [ deviceId, setDeviceId ] = React.useState('');\r\n    return (\r\n        <div>\r\n            <div>\r\n                Channel Id: \r\n                <Input type=\"text\" value={channelId} onChange={setChannelId} />\r\n            </div>\r\n            <div>\r\n                User Id: \r\n                <Input type=\"text\" value={userId} onChange={setUserId} />\r\n            </div>\r\n            <div>\r\n                Device Id: \r\n                <Input type=\"text\" value={deviceId} onChange={setDeviceId} />\r\n            </div>\r\n            <div>\r\n                <Button content=\"JOIN\" onClick={() => onJoin({channelId, userId, deviceId}) } />\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport InputForm from './InputForm';\r\nimport { Button } from '@scuf/common';\r\n\r\nconst { Client, Token, ChannelClaim, LocalMedia, AudioStream, VideoStream, RemoteMedia, DomLayoutManager } = require('fm.liveswitch');\r\n\r\nconst fmServerUrl = \"https://demo.liveswitch.fm:8443/sync\";\r\nconst fmAppId = \"my-app-id\";\r\nconst fmSharedSecret = \"--replaceThisWithYourOwnSharedSecret--\";\r\n\r\n\r\nexport default class App extends React.Component {\r\n\r\n    client;\r\n    layoutRef;\r\n    audioLM;\r\n    videoLM;\r\n    screenLM;\r\n    channel;\r\n    layoutManager;\r\n    upAudioConnection;\r\n    upVideoConnection;\r\n    upScreenConnection;\r\n    remoteMedias = [];\r\n\r\n    state = {\r\n        isAudio: true,\r\n        isVideo: false,\r\n        isScreen: false,\r\n        peers: {}\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.audioLM = new LocalMedia(true, false);\r\n        this.audioLM.start();\r\n        this.videoLM = new LocalMedia(false, true);\r\n        this.screenLM = new LocalMedia(false, true, true);\r\n        this.layoutManager = new DomLayoutManager(this.layoutRef);\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevState.isAudio !== this.state.isAudio) {\r\n            if (this.audioLM) this.audioLM.getAudioTrack().setMuted(!this.state.isAudio);\r\n            this.sendActionStatusToAll();\r\n        }\r\n        if (prevState.isVideo !== this.state.isVideo) {\r\n            if (this.state.isVideo) this.videoLM.start();\r\n            else this.videoLM.stop();\r\n            this.sendActionStatusToAll();\r\n        }\r\n        if (prevState.isScreen !== this.state.isScreen) {\r\n            if (this.state.isScreen) {\r\n                this.screenLM.start().then(() => {\r\n                    this.sendUpScreenConnection();\r\n                });\r\n            } else {\r\n                this.screenLM.stop().then(() => {\r\n                    this.closeUpScreenConnection();\r\n                });\r\n            }\r\n            this.sendActionStatusToAll();\r\n        }\r\n    }\r\n\r\n    toggleAudio = () => {\r\n        this.setState(prevState => ({ isAudio: !prevState.isAudio }));\r\n    }\r\n    \r\n    toggleVideo = () => {\r\n        this.setState(prevState => ({ isVideo: !prevState.isVideo }));\r\n    }\r\n\r\n    toggleScreen = () => {\r\n        this.setState(prevState => ({ isScreen: !prevState.isScreen }));\r\n    }\r\n\r\n    getActionsStatusAsString = () => {\r\n        return JSON.stringify({ \r\n            isAudio: this.state.isAudio, \r\n            isVideo: this.state.isVideo, \r\n            isScreen: this.state.isScreen \r\n        })\r\n    }\r\n\r\n    sendActionStatusToAll = () => {\r\n        if (this.channel) this.channel.sendMessage(this.getActionsStatusAsString());\r\n    }\r\n\r\n    sendAudioVideoUpConnections = () => {\r\n        const audioStream = new AudioStream(this.audioLM, null);\r\n        this.upAudioConnection = this.channel.createSfuUpstreamConnection(audioStream);\r\n        this.upAudioConnection.setTag('AUDIO');\r\n        this.upAudioConnection.open();\r\n    \r\n        const videoStream = new VideoStream(this.videoLM, null);\r\n        this.upVideoConnection = this.channel.createSfuUpstreamConnection(videoStream);\r\n        this.upVideoConnection.setTag('VIDEO');\r\n        this.upVideoConnection.open();\r\n    }\r\n\r\n    sendUpScreenConnection = () => {\r\n        const videoStream = new VideoStream(this.screenLM, null);\r\n        this.upScreenConnection = this.channel.createSfuUpstreamConnection(videoStream);\r\n        this.upScreenConnection.setTag('SCREEN');\r\n        this.upScreenConnection.open();\r\n    }\r\n\r\n    closeUpScreenConnection = () => {\r\n        this.upScreenConnection.close();\r\n    }\r\n\r\n    listenToChannel = () => {\r\n        this.channel.addOnRemoteUpstreamConnectionOpen(remoteConnectionInfo => {\r\n            const type = remoteConnectionInfo.getTag();\r\n            if (type === 'SCREEN' && this.state.isScreen) {\r\n                this.toggleScreen();\r\n            }\r\n            const remoteMedia = new RemoteMedia();\r\n            const userId = remoteConnectionInfo.getUserId();\r\n            let stream;\r\n            if (type === 'AUDIO') {\r\n                stream = new AudioStream(null, remoteMedia);\r\n            } else {\r\n                stream = new VideoStream(null, remoteMedia);\r\n                this.remoteMedias.push({ userId, type, remoteMedia });\r\n            }\r\n            if (type === 'SCREEN') this.layoutManager.addRemoteView(remoteMedia.getId(), remoteMedia.getView());\r\n            const downConnection = this.channel.createSfuDownstreamConnection(remoteConnectionInfo, stream);\r\n            downConnection.open();\r\n        });\r\n        this.channel.addOnRemoteUpstreamConnectionClose(remoteConnectionInfo => {\r\n            const type = remoteConnectionInfo.getTag();\r\n            const userId = remoteConnectionInfo.getUserId();\r\n            const remoteMediaItem = this.remoteMedias.find(rm => rm.userId === userId && rm.type === type);\r\n            if (remoteMediaItem) {\r\n                this.layoutManager.removeRemoteView(remoteMediaItem.remoteMedia.getId());\r\n                this.remoteMedias = this.remoteMedias.filter(rm => rm !== remoteMediaItem);\r\n            }\r\n        });\r\n        this.channel.addOnUserMessage((cl, message) => {\r\n            const userId = cl.getUserId();\r\n            const messageParsed = JSON.parse(message);\r\n            this.setState(prevState => ({\r\n                peers: {...prevState.peers, [userId]: { isVideo: messageParsed.isVideo, isAudio: messageParsed.isAudio, isScreen: messageParsed.isScreen } }\r\n            }));\r\n\r\n            if (messageParsed.type !== 'ACKNOWLEDGEMENT') {\r\n                const messageBody = JSON.parse(this.getActionsStatusAsString());\r\n                messageBody.type = 'ACKNOWLEDGEMENT';\r\n                this.channel.sendUserMessage(userId, JSON.stringify(messageBody));\r\n            }\r\n\r\n        });\r\n        this.channel.addOnMessage((cl, message) => {\r\n            const userId = cl.getUserId();\r\n            if (userId !== this.channel.getUserId()) {\r\n                const messageBody = JSON.parse(message);\r\n                this.setState(prevState => ({\r\n                    peers: {...prevState.peers, [userId]: { isVideo: messageBody.isVideo, isAudio: messageBody.isAudio, isScreen: messageBody.isScreen } }\r\n                }));\r\n                \r\n                const rm = this.remoteMedias.find(obj => obj.userId === userId);\r\n                if (rm) {\r\n                    if (messageBody.isVideo) this.layoutManager.addRemoteView(rm.remoteMedia.getId(), rm.remoteMedia.getView());\r\n                    else this.layoutManager.removeRemoteView(rm.remoteMedia.getId());\r\n                }\r\n            }\r\n        });\r\n        this.channel.addOnRemoteClientJoin(cl => {\r\n            const userId = cl.getUserId();\r\n            this.channel.sendUserMessage(userId, this.getActionsStatusAsString() );\r\n        });\r\n    }\r\n\r\n    handleJoin = info => {\r\n        const { channelId, userId, deviceId } = info;\r\n        this.client = new Client(fmServerUrl, fmAppId, userId, deviceId);\r\n        const token = Token.generateClientRegisterToken(this.client, [new ChannelClaim(channelId)], fmSharedSecret);\r\n        this.client.register(token).then(channels => {\r\n            this.channel = channels[0];\r\n            this.sendAudioVideoUpConnections();\r\n            this.listenToChannel();\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <InputForm onJoin={this.handleJoin} />\r\n                <Button onClick={this.toggleVideo} content={`TURN VIDEO ${this.state.isVideo ? 'OFF': 'ON'}`} /> <br />\r\n                <Button onClick={this.toggleAudio} content={`TURN AUDIO ${this.state.isAudio ? 'OFF': 'ON'}`} /> <br />\r\n                <Button onClick={this.toggleScreen} content={`TURN SCREEN ${this.state.isScreen ? 'OFF': 'ON'}`} /> <br />\r\n                <div>{JSON.stringify(this.state.peers)}</div>\r\n                <div className=\"layout\" ref={node => this.layoutRef = node} />\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}